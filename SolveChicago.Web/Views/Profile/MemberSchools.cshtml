@using SolveChicago.Entities
@model SolveChicago.Web.Models.Profile.MemberProfileSchoolViewModel

@{
    ViewBag.Title = "Schools";
    Layout = "~/Views/Shared/_Layout_MemberProfile.cshtml";
}

@section Styles {
    @Styles.Render("~/Content/jqueryui")
}

<div class="app-dashboard-body-content off-canvas-content" data-off-canvas-content>
    <header class="questionnaire-header">
        <h2>ANSWER THE FOLLOWING QUESTIONS</h2>
    </header>

    <ol class="progress-indicator">
        <li class="is-complete" data-step="1">
            <span>Personal</span>
        </li>
        <li class="is-complete" data-step="2">
            <span>Family in Household</span>
        </li>
        <li class="is-current" data-step="3">
            <span>Education</span>
        </li>
        <li class="" data-step="4">
            <span>Professional</span>
        </li>
        <li class="" data-step="5">
            <span>Training</span>
        </li>
        <li class="" data-step="6">
            <span>Gov. Benefits</span>
        </li>
        <li class="" data-step="7">
            <span>Finish</span>
        </li>
    </ol>

    @using (Html.BeginForm("MemberSchools", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Member.MemberId)
            @for (int i = 0; i < Model.Member.Schools.Length; i++)
            {
                <div class="School entry" data-id="@(i)">
                    <div class="row app-dashboard-form-container-space-around">
                        <div class="form-holder">
                            @Html.HiddenFor(m => Model.Member.Schools[i].Id)

                            @Html.ValidationMessageFor(model => Model.Member.Schools[i].Name, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => Model.Member.Schools[i].Name, "School Name", htmlAttributes: new { })
                            @Html.EditorFor(model => Model.Member.Schools[i].Name, new { htmlAttributes = new { @class = "school-list" } })

                            @Html.ValidationMessageFor(model => Model.Member.Schools[i].Type, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => Model.Member.Schools[i].Type, "School Type", htmlAttributes: new { })
                            @Html.DropDownListFor(model => Model.Member.Schools[i].Type, Model.SchoolTypeList.Select(x => new SelectListItem { Value = x, Text = x, Selected = x == Model.Member.Schools[i].Type }), "Choose a School Type", new { htmlAttributes = new { } })

                        </div>
                        <div class="form-holder">
                            @Html.ValidationMessageFor(model => Model.Member.Schools[i].Start, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => Model.Member.Schools[i].Start, "When did you start?", htmlAttributes: new { })
                            @Html.EditorFor(model => Model.Member.Schools[i].Start, new { htmlAttributes = new { @placeholder = "mm/yyyy" } })

                            @Html.ValidationMessageFor(model => Model.Member.Schools[i].IsCurrent, "", new { @class = "text-danger" })
                            @Html.LabelFor(model => Model.Member.Schools[i].IsCurrent, "Are you still attending?", htmlAttributes: new { })
                            @Html.RadioButtonFor(model => model.Member.Schools[i].IsCurrent, true, new { @class = "is-school-current" })
                            <label for="Member_Schools_[i]__IsCurrent">Yes</label>
                            @Html.RadioButtonFor(model => model.Member.Schools[i].IsCurrent, false, new { @class = "is-school-current" })
                            <label for="Member_Schools_[i]__IsCurrent">No</label>

                            <div class="school-endinfo">
                                @Html.ValidationMessageFor(model => Model.Member.Schools[i].End, "", new { @class = "text-danger" })
                                @Html.LabelFor(model => Model.Member.Schools[i].End, htmlAttributes: new {  })
                                @Html.EditorFor(model => Model.Member.Schools[i].End, new { htmlAttributes = new { @placeholder = "mm/yyyy" } })

                                @Html.ValidationMessageFor(model => Model.Member.Schools[i].Degree, "", new { @class = "text-danger" })
                                @Html.LabelFor(model => Model.Member.Schools[i].Degree, htmlAttributes: new { })
                                @Html.DropDownListFor(model => Model.Member.Schools[i].Degree, Model.DegreeList.Select(x => new SelectListItem { Value = x, Text = x, Selected = x == Model.Member.Schools[i].Degree }), new { htmlAttributes = new { } })
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="row align-center has-border">
                <a class="add-job addEntry" href="javascript:void(0)"> <img class="add-job-icon" src="../img/icon-add.svg" alt="Add School"> Add School</a>
            </div>
        </div>

        <div class="row align-center">
            <input type="submit" value="Submit" class="submit-create-profile" />
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/profile")

    <script>
        window.addEntryCallback = function (newEntry, isPageLoad) {
            var schoolsList = [];
            @foreach(var school in Model.SchoolsList)
            {
                @:schoolsList.push("@school");
            }
            newEntry.find('.school-list').autocomplete({ source: schoolsList });
            
            window.bindRadioContent(newEntry.find('.is-school-current'), "", newEntry.find('.school-endinfo'), "", isPageLoad);
        }

        window.addEntryCallback($('.School'), true);
    </script>
}
