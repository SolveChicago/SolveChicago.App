@using SolveChicago.Entities
@model SolveChicago.Web.Models.Profile.MemberProfileGovernmentProgramViewModel

@{
    ViewBag.Title = "Government Programs";
    Layout = "~/Views/Shared/_Layout_MemberProfile.cshtml";
}

<div class="app-dashboard-body-content off-canvas-content" data-off-canvas-content>
    <header class="questionnaire-header">
        <h2>ANSWER THE FOLLOWING QUESTIONS</h2>
    </header>

    @using (Html.BeginForm("MemberGovernmentPrograms", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Member.MemberId)
            @for (int i = 0; i < Model.Member.GovernmentPrograms.Length; i++)
            {
                @Html.HiddenFor(m => Model.Member.GovernmentPrograms[i].Id)
                <div id="GovernmentProgram" data-id="@(i)">
                    <div class="row app-dashboard-form-container-space-around">
                        @Html.LabelFor(model => Model.Member.GovernmentPrograms[i].ProgramId, htmlAttributes: new {  })
                        @Html.DropDownListFor(model => Model.Member.GovernmentPrograms[i].ProgramId, Model.GovernmentProgramList.Select(x => new SelectListItem { Value = x.Key.ToString(), Text = x.Value, Selected = x.Key == Model.Member.GovernmentPrograms[i].MemberId }), new { @multiple = "",  @class = "ui fluid dropdown" })
                        @Html.ValidationMessageFor(model => Model.Member.GovernmentPrograms[i].ProgramId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <hr />
            <div class="row align-center">
                <input type="submit" value="Submit" class="submit-create-profile" />
            </div>
        </div>
        }
    </div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/profile_member")
    @Scripts.Render("~/bundles/semantic")
    @Styles.Render("~/Content/semantic")
}
