@model SolveChicago.Web.Models.Profile.NonprofitProfile

@{
    ViewBag.Title = "Profile";
}

@section Styles {
    @Styles.Render("~/Content/jqueryui")
}

@using (Html.BeginForm("Nonprofit", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <header>
        <h4><strong>SERVICE PROVIDER:</strong> Profile</h4>
    </header>

    <div class="row app-dashboard-form-container">
        <div class="create-profile-form-holder">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Name, "Organization Name", htmlAttributes: new { })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.ProfilePicture, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.ProfilePicture, "Upload your logo", htmlAttributes: new { })
            @if (!string.IsNullOrEmpty(Model.ProfilePicturePath) && Model.ProfilePicturePath != "/img/side-nav-members-icon.svg")
            {
                <div>
                    <img src="@Model.ProfilePicturePath" alt="Profile Picture">
                </div>
            }
            @Html.TextBoxFor(model => model.ProfilePicture, new { type = "file", @class = "file-input" })

            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { })
            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "number-entry" } })

            @Html.ValidationMessageFor(model => model.PhoneExtension, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.PhoneExtension, "Ext.", htmlAttributes: new { })
            @Html.EditorFor(model => model.PhoneExtension, new { htmlAttributes = new { @class = "number-entry" } })

            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Address1, "Street Address", htmlAttributes: new { })
            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Address2, "Apt, Unit #", htmlAttributes: new { })
            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.City, htmlAttributes: new { })
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Province, "State", htmlAttributes: new { })
            @Html.EditorFor(model => model.Province, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.ZipCode, "Zip Code", htmlAttributes: new { })
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.Country, htmlAttributes: new { })
            @Html.DropDownListFor(model => model.Country, Model.CountryList.Select(x => new SelectListItem { Text = x, Value = x, Selected = x == Model.Country }), new { htmlAttributes = new { } })

            @Html.ValidationMessageFor(model => model.SoftSkillsOffered, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.SoftSkillsOffered, "What soft skills do you teach? (i.e. leadership, pose, interview skills)")
            @Html.EditorFor(model => model.SoftSkillsOffered, new { htmlAttributes = new { type = "text" } })

            @Html.ValidationMessageFor(model => model.WorkforceSkillsOffered, "", new { @class = "text-danger" })
            @Html.LabelFor(model => model.WorkforceSkillsOffered, "What workforce skills do you teach? (i.e. construction, manufacturing, coding)")
            @Html.EditorFor(model => model.WorkforceSkillsOffered, new { htmlAttributes = new { type = "text" } })

            <input class="submit-create-profile" type="submit" value="Submit">
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/profile_member")
    <script>
            $(document).ready(function () {
                var workforceSkillsList = [],
                    softSkillsList = [];
                @foreach(var skill in Model.WorkforceSkillsList)
                {
                    @:workforceSkillsList.push("@skill");
                }
                @foreach(var skill in Model.SoftSkillsList)
                {
                    @:softSkillsList.push("@skill");
                }
                window.bindAutocomplete($('#WorkforceSkillsOffered'), workforceSkillsList);
                window.bindAutocomplete($('#SoftSkillsOffered'), softSkillsList);
            });
    </script>
}
